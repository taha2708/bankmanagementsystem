#include<iostream>
#include<fstream>
#include<cctype>
#include<iomanip>
#include <conio.h>
#include<string>
#include<stdlib.h>
#include<sstream>
#include<ctime>
using namespace std;

//***************************************************************
//      function declaration
//****************************************************************
void write_account();   //function to write record in binary file
void display_sp(int);   //function to display account details given by user
void modify_account(int);   //function to modify record of file
void delete_account(int);   //function to delete record of file
void display_all();     //function to display all account details
void deposit_withdraw(int, int); // function to desposit/withdraw amount for given account
void intro();   //introductory screen function
void transfer(int from,int to);
void dots(int);

//***************************************************************
//                   CLASS USED IN PROJECT
//****************************************************************

class account
{
	char name[50];
	char DOB[12];
	long CNIC;
    int acno;
    int deposit;
    char type;
    
public:
    void create_account();  //function to get data from user
    void show_account() const;  //function to show data on screen
    void modify();  //function to add new data
    void dep(int);  //function to accept amount and add to balance amount
    void draw(int); //function to accept amount and subtract from balance amount
    void report() const;    //function to show data in tabular format
    int retacno() const;    //function to return account number
    int retdeposit() const; //function to return balance amount
    char rettype() const;   //function to return type of account
};         //class ends here

void account::create_account()
{
    cout<<"\nEnter The account No. :";
    cin>>acno;
    cout<<"\n\nEnter The Name of The account Holder : ";
    cin.ignore();
    cin.getline(name,50);
    cout<<"\n\nEnter The Date of Birth : ";
    cin.getline(DOB,12);
    cout<<"\n\nEnter The CNIC : ";
    cin>>CNIC;
    cout<<"\nEnter Type of The account (C/S) : ";
    cin>>type;
    type=toupper(type);
    cout<<"\nEnter The Initial amount(>=500 for Saving and >=1000 for current ) : ";
    cin>>deposit;
    cout<<"\n\n\nAccount Created..";
    cin.get();
}

void account::show_account() const
{
    cout<<"\nAccount No. : "<<acno;
    cout<<"\nAccount Holder Name : ";
    cout<<name;
    cout<<"\nType of Account : "<<type;
    cout<<"\nBalance amount : "<<deposit;
    cin.get();
}


void account::modify()
{
    cout<<"\nAccount No. : "<<acno;
    cout<<"\nModify Account Holder Name : ";
    cin.ignore();
    cin.getline(name,50);
    cout<<"\nModify Type of Account : ";
    cin>>type;
    type=toupper(type);
    cout<<"\nModify Balance amount : ";
    cin>>deposit;
}


void account::dep(int x)
{
    deposit+=x;
}

void account::draw(int x)
{
    deposit-=x;
}

void account::report() const
{
    cout<<acno<<"\t\t"<<name<<"\t"<<type<<"\t\t"<<deposit<<endl;
    cin.get();
}


int account::retacno() const
{
    return acno;
}

int account::retdeposit() const
{
    return deposit;
}

char account::rettype() const
{
    return type;
}
class Transaction
{
	public:
	int dd;
	int mm;
	int year;
	void setdate(int d,int m,int yr)
	{
		if(d<=31 && m<=12 && yr<=2017)
		{
			dd=d;
			mm=m;
			year=yr;
		}
	}
	void transactiondetails(int no,int amt,int option)
	{
		
		cout<<"\nEnter Date\n";
		cin>>dd>>mm>>year;
		//cout<<"Before";
		stringstream ss;
		ss << no;
		string str = ss.str();
		//cout<<"After";
		string filename=str;
		ofstream myfile;
		//cout<<"I am before fileopen";
  		myfile.open(filename.c_str(),ios::app);
  		//cout<<"After";
  		if(option==1)
  		{
  			//cout<<"Hello";
  			myfile <<dd<<"-"<<mm<<"-"<<year;
  			myfile <<"\tAmount Deposited\t"<<amt;
  			myfile <<"\n";
		}
		if(option==2)
  		{
  			//cout<<"Hello1";
  			myfile <<dd<<"-"<<mm<<"-"<<year;
  			myfile <<"\tAmount Withdraw\t"<<amt;
  			myfile <<"\n";
		}
		if(option==3)
		{
			myfile <<dd<<"-"<<mm<<"-"<<year;
  			myfile <<"\tAmount Rollback\t"<<amt;
  			myfile <<"\n";
		}
  		myfile.close();
	}
	void completedetails(int ac)
	{
		stringstream ss;
		ss << ac;
		string str = ss.str();
		string line;
		ifstream myfile(str.c_str());
  		if (myfile.is_open())
  		{
    		while ( getline (myfile,line) )
    		{
      			cout << line << '\n';
    		}
    		myfile.close();
  		}
  	cin.get();
	}
	void last7days(int ac)
	{
		stringstream ss;
		ss << ac;
		string str = ss.str();
		string line;
		char ch;
		time_t now = time(0);
		char* dt = ctime(&now);
		ifstream myfile(str.c_str());
  		if (myfile.is_open())
  		{
    		while (!myfile.eof())
    		{
    			myfile>>dd>>ch>>mm>>ch>>year;
    			getline (myfile,line);
    			if(dd>=6 && mm==12 && year==2017)
      			cout <<dd<<"-"<<mm<<"-"<<year<<" "<< line << '\n';
    		}
    		myfile.close();
  		}
  		cin.get();
	}
};
class Admin
{
	string pwd="!@#$";
	public:
	
	void Working(string pass)
	{
			char ch1;
			cout << "Enter pass\n";
   			ch1 = _getch();
   			while(ch1 != 13)
			{
      			pass.push_back(ch1);
      			cout << '*';
      			ch1 = _getch();
   			}
		char ch;
		int num;
		if(pwd==pass)
		{
			do
			{
				system("cls");
				cout<<"\n\n\t01. NEW ACCOUNT";
				cout<<"\n\n\t02. ALL ACCOUNT HOLDER LIST";
        		cout<<"\n\n\t03. CLOSE AN ACCOUNT";
        		cout<<"\n\n\t04. MODIFY AN ACCOUNT";
        		cout<<"\n\n\t05. EXIT";
        		cout<<"\n\n\tSelect Your Option (1-5) ";
        		cin>>ch;
        		system("cls");
        		switch(ch)
        		{
        			case '1':
            		write_account();
            		break;
            		case '2':
            		display_all();
            		break;
        			case '3':
            		cout<<"\n\n\tEnter The account No. : "; cin>>num;
            		delete_account(num);
            		break;
         			case '4':
            		cout<<"\n\n\tEnter The account No. : "; cin>>num;
            		modify_account(num);
            		break;
         			case '5':
            		cout<<"\n\n\tExiting";
            		for(int i=0;i<=6;i++)
        			{
            		dots(100000000);
            cout<<".";
        }
            		break;
         			default :cout<<"a";
				}
				cin.get();
			}while(ch!='5');
		}
	}
};
class User
{
	public:
	void Working(int num)
	{
		int amt;
    bool found=false;
    account ac;
    fstream File;
    File.open("account.dat", ios::binary|ios::in|ios::out);
    if(!File)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File.eof() && found==false)
    {
        File.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==num)
        found=true;
	}
	File.close();
		char ch;
		int to;
		Transaction T;
	if(found==true)
	{
		do
		{
			system("cls");
			cout<<"\n\n\t01. DEPOSIT AMOUNT";
        	cout<<"\n\n\t02. WITHDRAW AMOUNT";
        	cout<<"\n\n\t03. BALANCE INQUIRY";
        	cout<<"\n\n\t04. TRANSFER";
        	cout<<"\n\n\t05. TRANSACTION DETAILS";
        	cout<<"\n\n\t06. LAST 7 DAYS";
        	cout<<"\n\n\t07. EXIT";
        	cout<<"\n\n\tSelect Your Option (1-6)";
        	cin>>ch;
        	switch(ch)
        	{
        		case '1':
            	deposit_withdraw(num, 1);
           		break;
        		case '2':
           		deposit_withdraw(num, 2);
           		break;
        		case '3':
           		display_sp(num);
           		break;
           		case '4':
           		cout<<"Enter the Account number to Transfer\n";
           		cin>>to;
           		transfer(num,to);
           		break;
           		case '5':
           		T.completedetails(num);
           		cin.get();
           		break;
           		case '6':
           		T.last7days(num);
           		cin.get();
           		break;
        		case '7':
           		cout<<"\n\n\tExiting";
           		for(int i=0;i<=6;i++)
        		{
            		dots(100000000);
            		cout<<".";
        		}
        		break;
        		default :cout<<"Invalid";
			}
		}while(ch!='7');
	}
	else 
	{
		cout<<"\nInvalid Account Number\n";
		cin.get();
	}
}
};


//***************************************************************
//      THE MAIN FUNCTION OF PROGRAM
//****************************************************************


int main()
{
    char ch;
    int num;
    string pass ="";
   	//char ch1;
    Admin Ad;
    //Transaction T;
    //T.transactiondetails(131,2,1);
    intro();
    do
    {
        system("cls");
        cout<<"\n\n\n\tMAIN MENU";
        cout<<"\n\n\t01. ADMIN";
        cout<<"\n\n\t02. USER";
        cout<<"\n\n\t03. EXIT";
        cout<<"\n\n\tSelect Your Option (1-3) ";
        cin>>ch;
        system("cls");
        switch(ch)
        {
        case '1':
			Ad.Working(pass);
            break;
        case '2':
        	cout<<"\n\n\tEnter The account No. : "; 
			cin>>num;
			User Us;
			Us.Working(num);
			break;
         case '3':
         	for(int i=0;i<=6;i++)
        	{
            	dots(100000000);
            	cout<<".";
        	}
            cout<<"\n\n\tThanks for using bank managemnt system";
            break;
         default :cout<<"Invalid";
        }
        cin.ignore();
    }while(ch!='3');
    return 0;
}


//***************************************************************
//      function to write in file
//****************************************************************

void write_account()
{
    account ac;
    ofstream outFile;
    outFile.open("account.dat",ios::binary|ios::app);
    ac.create_account();
    outFile.write(reinterpret_cast<char *> (&ac), sizeof(account));
    outFile.close();
}

//***************************************************************
//      function to read specific record from file
//****************************************************************

void display_sp(int n)
{
    account ac;
    bool flag=false;
    ifstream inFile;
    inFile.open("account.dat",ios::binary);
    if(!inFile)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    cout<<"\nBALANCE DETAILS\n";

        while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
    {
        if(ac.retacno()==n)
        {
            ac.show_account();
            flag=true;
        }
    }
    inFile.close();
    if(flag==false)
        cout<<"\n\nAccount number does not exist";
}


//***************************************************************
//      function to modify record of file
//****************************************************************

void modify_account(int n)
{
    bool found=false;
    account ac;
    fstream File;
    File.open("account.dat",ios::binary|ios::in|ios::out);
    if(!File)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File.eof() && found==false)
    {
        File.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==n)
        {
            ac.show_account();
            cout<<"\n\nEnter The New Details of account"<<endl;
            ac.modify();
            int pos=(-1)*static_cast<int>(sizeof(account));
            File.seekp(pos,ios::cur);
            File.write(reinterpret_cast<char *> (&ac), sizeof(account));
            cout<<"\n\n\t Record Updated";
            found=true;
          }
    }
    File.close();
    if(found==false)
        cout<<"\n\n Record Not Found ";
}


void delete_account(int n)
{
    account ac;
    ifstream inFile;
    ofstream outFile;
    inFile.open("account.dat",ios::binary);
    if(!inFile)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    outFile.open("Temp.dat",ios::binary);
    inFile.seekg(0,ios::beg);
    while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
    {
        if(ac.retacno()!=n)
        {
            outFile.write(reinterpret_cast<char *> (&ac), sizeof(account));
        }
    }
    inFile.close();
    outFile.close();
    remove("account.dat");
    rename("Temp.dat","account.dat");
    cout<<"\n\n\tRecord Deleted ..";
}

//***************************************************************
//      function to display all accounts deposit list
//****************************************************************

void display_all()
{
    account ac;
    ifstream inFile;
    inFile.open("account.dat",ios::binary);
    if(!inFile)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    cout<<"\n\n\t\tACCOUNT HOLDER LIST\n\n";
    cout<<"===============================================================\n";
    cout<<"A/c no.\t\tNAME\t\tType\t\tBalance\n";
    cout<<"===============================================================\n";
    while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
    {
        ac.report();
    }
    inFile.close();
}

//***************************************************************
//      function to deposit and withdraw amounts
//****************************************************************

void deposit_withdraw(int n, int option)
{
    int amt;
    bool found=false;
    account ac;
    Transaction T;
    fstream File;
    File.open("account.dat", ios::binary|ios::in|ios::out);
    if(!File)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File.eof() && found==false)
    {
        File.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==n)
        {
            ac.show_account();
            if(option==1)
            {
                cout<<"\n\n\tTO DEPOSITE AMOUNT ";
                cout<<"\n\nEnter The amount to be deposited";
                cin>>amt;
                ac.dep(amt);
                T.transactiondetails(n,amt,1);
            }
            if(option==2)
            {
                cout<<"\n\n\tTO WITHDRAW AMOUNT ";
                cout<<"\n\nEnter The amount to be withdraw";
                cin>>amt;
                int bal=ac.retdeposit()-amt;
                if((bal<500 && ac.rettype()=='S') || (bal<1000 && ac.rettype()=='C'))
                    cout<<"Insufficience balance";
                else
                {
					    ac.draw(amt);
					    T.transactiondetails(n,amt,1);
				}
            }
            int pos=(-1)*static_cast<int>(sizeof(ac));
            File.seekp(pos,ios::cur);
            File.write(reinterpret_cast<char *> (&ac), sizeof(account));
            cout<<"\n\n\t Record Updated";
            found=true;
           }
         }
    File.close();
    if(found==false)
        cout<<"\n\n Record Not Found ";
}
void transfer(int from,int to)
{
	int amt;
	bool found=false,found1=false;
    account ac;
    Transaction T;
    fstream File,File1,File2;
    File.open("account.dat", ios::binary|ios::in|ios::out);
    if(!File)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File.eof() && found==false)
    {
        File.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==from)
        {
            ac.show_account();
                cout<<"\n\nEnter The amount to be Transfer";
                cin>>amt;
                int bal=ac.retdeposit()-amt;
                if((bal<500 && ac.rettype()=='S') || (bal<1000 && ac.rettype()=='C'))
                    cout<<"Insufficience balance";
                else
                {
					    ac.draw(amt);
                    T.transactiondetails(from,amt,2);
            	}
            	int pos=(-1)*static_cast<int>(sizeof(ac));
            	File.seekp(pos,ios::cur);
            	File.write(reinterpret_cast<char *> (&ac), sizeof(account));
            	cout<<"\n\n\t Record Updated";
            	found=true;
        }
	}
	File.close();
	if(found==true);
    {
	File1.open("account.dat", ios::binary|ios::in|ios::out);
    if(!File1)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File1.eof() && found1==false)
    {
        File1.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==to)
        {
            	ac.show_account();
                cout<<"\n\n";
                cout<<amt<<"\t to be deposited";
                ac.dep(amt);
                T.transactiondetails(to,amt,1);
		 int pos=(-1)*static_cast<int>(sizeof(ac));
            File1.seekp(pos,ios::cur);
            File1.write(reinterpret_cast<char *> (&ac), sizeof(account));
            cout<<"\n\n\t Record Updated";
            found1=true;
        }
	}
	File1.close();
	}
	if(found==false)
	{
		cout<<"\n\nTransfering Account is not found";
	}
    if(found1==false)
        {
        found=false;
		cout<<"\n\nRecieving Account Not Found ";
		File2.open("account.dat", ios::binary|ios::in|ios::out);
    if(!File2)
    {
        cout<<"File could not be open !! Press any Key...";
        return;
    }
    while(!File2.eof() && found==false)
    {
        File1.read(reinterpret_cast<char *> (&ac), sizeof(account));
        if(ac.retacno()==from)
        {
            //ac.show_account();
            //cout<<"\n\n\tTO DEPOSITE AMOUNT ";
            //  cout<<"\n\nEnter The amount to be deposited";
            ac.dep(amt);
            T.transactiondetails(from,amt,3);
		 int pos=(-1)*static_cast<int>(sizeof(ac));
            File2.seekp(pos,ios::cur);
            File2.write(reinterpret_cast<char *> (&ac), sizeof(account));
            cout<<"\n\n\t Record Updated";
            found==true;
        }
	}
	found1=true;
	File2.close();
	}
        
}

//***************************************************************
//      INTRODUCTION FUNCTION
//****************************************************************

void dots(int j)
{   int i,k;
    for(i=0;i<j;i++)
         k=i;
}
void intro()
{
	cout<<"\n##########     ###########     ##########     ##########                  #     #   @  @  ";
    cout<<"\n#        #     #               #        #     #        #        ***       ##    #   @ @   ";
    cout<<"\n#______#       #               #______#       #______#         *   *      # #   #   @@    ";
    cout<<"\n#        #     #               #        #     #        #      *******     #  #  #   @ @   ";
    cout<<"\n#         #    #               #         #    #         #    *       *    #   # #   @  @  ";
    cout<<"\n###########    ###########     ###########    ###########   *         *   #     #   @   @ "; 
		
    cout<<"\n\n Enter any button and press enter to continue..";
    cin.get();
    system("cls");
    cout<<"LOADING";
    for(int i=0;i<=6;i++)
        {
            dots(100000000);
            cout<<".";
        }
}

//***************************************************************
//              END OF PROJECT
//*
